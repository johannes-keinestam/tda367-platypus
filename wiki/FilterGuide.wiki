=How to create a filter and basic guidelines=

===The class===

The first thing to do is to create a new java class called 

Filter and put in the package edu.chalmers.platypus.model. 

Implement the interface IFilter (and its methods) which you may 

obtain from our website. If you like the filter to have 

interactive controls you may also extend observable.

{{{
package edu.chalmers.platypus.model;

import java.awt.image.BufferedImage;

public class Filter extends Observable implements IFilter {
}}}


==Naming==

The name you choose for your filter must be as unique as 

possible to avoid name conflicts with other filters. We strongly 

recommend putting the developers name in front of the name of 

filter.
{{{
@Override

    public String getName() {

        return "Developer Blur";

    } 
}}}

==Descriptive image==

You can add a descriptive image to your filter. The image will 

be shown in the add filter menu. The maximum size for the image 

is *80x80* pixels. 

==GUI==

A filter can have a custom GUI with controls, information or 

anything that is relevant to the filter. It’s not recommended to 

make the GUI panel wider then ===400px ===but it is possible. 

There are no restraints in height but try to keep it as low as 

possible to avoid unnecessary scrolling. 


If want your filter to contain a GUI you only have to return a 

jPanel or a subclass of jPanel in the getPanel method. If you 

want to update the preview just call setChanged() and 

notifyObservers(). Remember that updating the preview to often 

can make the program slow and frustrating to use.
{{{
@Override

    publi JPanel getPanel() {

        return panel;

    }
}}}


==ApplyFilter==

The applyFilter method is the most important of them all. This 

is where you do your filter operation. You get a bufferedimage 

as an argument and you return a bufferedimage with the result of 

your filter.

==Get and loadState==

The get and loadstate methods are only necessary if you want 

your filter to return to its current state later in a preset. If 

your filter has no options you can just ignore this methods and 

leave them empty. If it has options it’s important to support 

load and save state so it can work correctly in a future preset. 

===getState()===

Platypix calls getStat() when it tries to save a preset. Just 

store the values you need in a array of optional type (it must 

be serializable) and return it in getState() and it will be 

saved for later use.

===loadState()===

The very same array will be obtained from Platypix when 

loadState() is called. You have to cast it from Object[] to the 

type used earlier. After that just put the values back into the 

filter.

==Packaging==

All filters must be put in a jar-file. Put your class-files with 

correct packaging in a jar-file that you call the filters name 

(remove any blank spaces). If you use external libraries put 

them beside your filter in PlatyPix/Filters (not in the same 

jar-file as the filter). You have to notify PlatyPix that you 

are using external libraries by adding a txt-file called 

Libraries in the jar-file containing the filter. Write the name 

of each external library you want to load with your filter. The 

rows in Libraries.txt separate the libraries from each other so 

only one library per row (as below).

    Library1.jar

    Library2.jar







==Example filter==

{{{
package edu.chalmers.platypus.model;


import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.Observable;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.jhlabs.image.GaussianFilter;

public class Filter extends Observable implements IFilter {
	/**
	 * 
	 */
	private static final long serialVersionUID = -2223555253792480696L;
	private CtrlPanel panel;
	
	public Filter(){
		panel = new CtrlPanel();
		panel.getSliderAmount().addChangeListener(new ChangeListener() {
			
			@Override
			public void stateChanged(ChangeEvent arg0) {
				setChanged();
				notifyObservers();
				
			}
		});
		
	}
	
	@Override
	public String getName() {
		return "Blur";
	}

	@Override
	public String getDescription() {
		return "Blurs image.";
	}

	@Override
	public ImageIcon getDescriptiveImage() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public JPanel getPanel() {
		return panel;
	}

	@Override
	public BufferedImage applyFilter(BufferedImage image) {
		GaussianFilter gf = new  GaussianFilter(panel.getSliderAmount().getValue());
		return gf.filter(image, image);

        }
	@Override
	public Object[] getState() {
		Integer[] state = new Integer[1];
		state[0] =  panel.getSliderAmount().getValue();
		return state;
	}

	@Override
	public void setState(Object[] state) {
		Integer[] value = Arrays.copyOf(state, state.length, Integer[].class);
		panel.getSliderAmount().setValue(value[0]);
	}





		
}
}}}